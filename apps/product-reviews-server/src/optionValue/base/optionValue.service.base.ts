/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OptionValue as PrismaOptionValue } from "@prisma/client";

export class OptionValueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OptionValueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.optionValue.count(args);
  }

  async optionValues(
    args: Prisma.OptionValueFindManyArgs
  ): Promise<PrismaOptionValue[]> {
    return this.prisma.optionValue.findMany(args);
  }
  async optionValue(
    args: Prisma.OptionValueFindUniqueArgs
  ): Promise<PrismaOptionValue | null> {
    return this.prisma.optionValue.findUnique(args);
  }
  async createOptionValue(
    args: Prisma.OptionValueCreateArgs
  ): Promise<PrismaOptionValue> {
    return this.prisma.optionValue.create(args);
  }
  async updateOptionValue(
    args: Prisma.OptionValueUpdateArgs
  ): Promise<PrismaOptionValue> {
    return this.prisma.optionValue.update(args);
  }
  async deleteOptionValue(
    args: Prisma.OptionValueDeleteArgs
  ): Promise<PrismaOptionValue> {
    return this.prisma.optionValue.delete(args);
  }
}
